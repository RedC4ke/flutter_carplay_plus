// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum FCPImageSource {
  network,
}

enum FCPTemplateType {
  list,
  modal,
  tabBar,
}

enum FCPTemplateCategory {
  fullscreen,
  modal,
}

enum FCPListTemplateItemType {
  listItem,
  imageRowListItem,
  messageListItem,
}

enum FCPListItemAccessoryType {
  none,
  disclosureIndicator,
  detailButton,
}

enum FCPListItemPlayingIndicatorLocation {
  leading,
  trailing,
}

enum FCPMessageLeadingItem {
  none,
  pin,
  star,
}

enum FCPMessageTrailingItem {
  none,
  mute,
}

enum FCPBarButtonStyle {
  none,
  rounded,
}

enum FCPBarButtonType {
  text,
  image,
}

class FCPComponentData {
  FCPComponentData({
    required this.componentId,
  });

  String componentId;

  Object encode() {
    return <Object?>[
      componentId,
    ];
  }

  static FCPComponentData decode(Object result) {
    result as List<Object?>;
    return FCPComponentData(
      componentId: result[0]! as String,
    );
  }
}

class FCPImageData {
  FCPImageData({
    required this.source,
    required this.path,
  });

  FCPImageSource source;

  String path;

  Object encode() {
    return <Object?>[
      source.index,
      path,
    ];
  }

  static FCPImageData decode(Object result) {
    result as List<Object?>;
    return FCPImageData(
      source: FCPImageSource.values[result[0]! as int],
      path: result[1]! as String,
    );
  }
}

class FCPTabData {
  FCPTabData({
    this.tabTitle,
    this.tabImage,
    this.showsTabBadge = false,
  });

  String? tabTitle;

  FCPImageData? tabImage;

  bool showsTabBadge;

  Object encode() {
    return <Object?>[
      tabTitle,
      tabImage?.encode(),
      showsTabBadge,
    ];
  }

  static FCPTabData decode(Object result) {
    result as List<Object?>;
    return FCPTabData(
      tabTitle: result[0] as String?,
      tabImage: result[1] != null
          ? FCPImageData.decode(result[1]! as List<Object?>)
          : null,
      showsTabBadge: result[2]! as bool,
    );
  }
}

class WrappedTemplateData {
  WrappedTemplateData({
    required this.type,
    required this.data,
    this.listTemplateData,
    this.tabBarTemplateData,
  });

  FCPTemplateType type;

  FCPTemplateData data;

  FCPListTemplateData? listTemplateData;

  FCPTabBarTemplateData? tabBarTemplateData;

  Object encode() {
    return <Object?>[
      type.index,
      data.encode(),
      listTemplateData?.encode(),
      tabBarTemplateData?.encode(),
    ];
  }

  static WrappedTemplateData decode(Object result) {
    result as List<Object?>;
    return WrappedTemplateData(
      type: FCPTemplateType.values[result[0]! as int],
      data: FCPTemplateData.decode(result[1]! as List<Object?>),
      listTemplateData: result[2] != null
          ? FCPListTemplateData.decode(result[2]! as List<Object?>)
          : null,
      tabBarTemplateData: result[3] != null
          ? FCPTabBarTemplateData.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class FCPTemplateData {
  FCPTemplateData({
    required this.componentData,
    this.tabData,
    required this.category,
  });

  FCPComponentData componentData;

  FCPTabData? tabData;

  FCPTemplateCategory category;

  Object encode() {
    return <Object?>[
      componentData.encode(),
      tabData?.encode(),
      category.index,
    ];
  }

  static FCPTemplateData decode(Object result) {
    result as List<Object?>;
    return FCPTemplateData(
      componentData: FCPComponentData.decode(result[0]! as List<Object?>),
      tabData: result[1] != null
          ? FCPTabData.decode(result[1]! as List<Object?>)
          : null,
      category: FCPTemplateCategory.values[result[2]! as int],
    );
  }
}

class FCPTabBarTemplateData {
  FCPTabBarTemplateData({
    required this.templates,
  });

  List<WrappedTemplateData?> templates;

  Object encode() {
    return <Object?>[
      templates,
    ];
  }

  static FCPTabBarTemplateData decode(Object result) {
    result as List<Object?>;
    return FCPTabBarTemplateData(
      templates: (result[0] as List<Object?>?)!.cast<WrappedTemplateData?>(),
    );
  }
}

class FCPListTemplateData {
  FCPListTemplateData({
    this.barButtonProvidingData,
    required this.sections,
    this.emptyViewTitleVariants = const [],
    this.emptyViewSubtitleVariants = const [],
    this.title,
  });

  FCPBarButtonProvidingData? barButtonProvidingData;

  List<FCPListSectionData?> sections;

  List<String?> emptyViewTitleVariants;

  List<String?> emptyViewSubtitleVariants;

  String? title;

  Object encode() {
    return <Object?>[
      barButtonProvidingData?.encode(),
      sections,
      emptyViewTitleVariants,
      emptyViewSubtitleVariants,
      title,
    ];
  }

  static FCPListTemplateData decode(Object result) {
    result as List<Object?>;
    return FCPListTemplateData(
      barButtonProvidingData: result[0] != null
          ? FCPBarButtonProvidingData.decode(result[0]! as List<Object?>)
          : null,
      sections: (result[1] as List<Object?>?)!.cast<FCPListSectionData?>(),
      emptyViewTitleVariants: (result[2] as List<Object?>?)!.cast<String?>(),
      emptyViewSubtitleVariants: (result[3] as List<Object?>?)!.cast<String?>(),
      title: result[4] as String?,
    );
  }
}

class FCPListSectionData {
  FCPListSectionData({
    this.header,
    this.sectionIndexTitle,
    required this.items,
    this.headerButton,
    this.headerImage,
    this.headerSubtitle,
  });

  String? header;

  String? sectionIndexTitle;

  List<WrappedListItemData?> items;

  FCPButtonData? headerButton;

  FCPImageData? headerImage;

  String? headerSubtitle;

  Object encode() {
    return <Object?>[
      header,
      sectionIndexTitle,
      items,
      headerButton?.encode(),
      headerImage?.encode(),
      headerSubtitle,
    ];
  }

  static FCPListSectionData decode(Object result) {
    result as List<Object?>;
    return FCPListSectionData(
      header: result[0] as String?,
      sectionIndexTitle: result[1] as String?,
      items: (result[2] as List<Object?>?)!.cast<WrappedListItemData?>(),
      headerButton: result[3] != null
          ? FCPButtonData.decode(result[3]! as List<Object?>)
          : null,
      headerImage: result[4] != null
          ? FCPImageData.decode(result[4]! as List<Object?>)
          : null,
      headerSubtitle: result[5] as String?,
    );
  }
}

class FCPListItemData {
  FCPListItemData({
    required this.accessoryType,
    this.accessoryImage,
    this.detailText,
    this.image,
    this.isExplicitContent = false,
    this.isPlaying = false,
    this.playingIndicatorLocation = FCPListItemPlayingIndicatorLocation.trailing,
    this.playbackProgress = 0,
  });

  FCPListItemAccessoryType accessoryType;

  FCPImageData? accessoryImage;

  String? detailText;

  FCPImageData? image;

  bool isExplicitContent;

  bool isPlaying;

  FCPListItemPlayingIndicatorLocation playingIndicatorLocation;

  double playbackProgress;

  Object encode() {
    return <Object?>[
      accessoryType.index,
      accessoryImage?.encode(),
      detailText,
      image?.encode(),
      isExplicitContent,
      isPlaying,
      playingIndicatorLocation.index,
      playbackProgress,
    ];
  }

  static FCPListItemData decode(Object result) {
    result as List<Object?>;
    return FCPListItemData(
      accessoryType: FCPListItemAccessoryType.values[result[0]! as int],
      accessoryImage: result[1] != null
          ? FCPImageData.decode(result[1]! as List<Object?>)
          : null,
      detailText: result[2] as String?,
      image: result[3] != null
          ? FCPImageData.decode(result[3]! as List<Object?>)
          : null,
      isExplicitContent: result[4]! as bool,
      isPlaying: result[5]! as bool,
      playingIndicatorLocation: FCPListItemPlayingIndicatorLocation.values[result[6]! as int],
      playbackProgress: result[7]! as double,
    );
  }
}

class FCPListImageRowItemData {
  FCPListImageRowItemData({
    required this.gridImages,
    required this.imageTitles,
  });

  List<FCPImageData?> gridImages;

  List<String?> imageTitles;

  Object encode() {
    return <Object?>[
      gridImages,
      imageTitles,
    ];
  }

  static FCPListImageRowItemData decode(Object result) {
    result as List<Object?>;
    return FCPListImageRowItemData(
      gridImages: (result[0] as List<Object?>?)!.cast<FCPImageData?>(),
      imageTitles: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class FCPMessageListItemLeadingConfigurationData {
  FCPMessageListItemLeadingConfigurationData({
    this.leadingItem = FCPMessageLeadingItem.none,
    this.leadingImage,
    this.isUnread = false,
  });

  FCPMessageLeadingItem? leadingItem;

  FCPImageData? leadingImage;

  bool isUnread;

  Object encode() {
    return <Object?>[
      leadingItem?.index,
      leadingImage?.encode(),
      isUnread,
    ];
  }

  static FCPMessageListItemLeadingConfigurationData decode(Object result) {
    result as List<Object?>;
    return FCPMessageListItemLeadingConfigurationData(
      leadingItem: result[0] != null
          ? FCPMessageLeadingItem.values[result[0]! as int]
          : null,
      leadingImage: result[1] != null
          ? FCPImageData.decode(result[1]! as List<Object?>)
          : null,
      isUnread: result[2]! as bool,
    );
  }
}

class FCPMessageListItemTrailingConfigurationData {
  FCPMessageListItemTrailingConfigurationData({
    this.trailingItem = FCPMessageTrailingItem.none,
    this.trailingImage,
  });

  FCPMessageTrailingItem trailingItem;

  FCPImageData? trailingImage;

  Object encode() {
    return <Object?>[
      trailingItem.index,
      trailingImage?.encode(),
    ];
  }

  static FCPMessageListItemTrailingConfigurationData decode(Object result) {
    result as List<Object?>;
    return FCPMessageListItemTrailingConfigurationData(
      trailingItem: FCPMessageTrailingItem.values[result[0]! as int],
      trailingImage: result[1] != null
          ? FCPImageData.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class FCPListMessageItemData {
  FCPListMessageItemData({
    this.conversationIdentifier,
    this.phoneOrEmailAddress,
    this.detailText,
    this.trailingText,
    this.leadingConfiguration,
    this.trailingConfiguration,
  });

  String? conversationIdentifier;

  String? phoneOrEmailAddress;

  String? detailText;

  String? trailingText;

  FCPMessageListItemLeadingConfigurationData? leadingConfiguration;

  FCPMessageListItemTrailingConfigurationData? trailingConfiguration;

  Object encode() {
    return <Object?>[
      conversationIdentifier,
      phoneOrEmailAddress,
      detailText,
      trailingText,
      leadingConfiguration?.encode(),
      trailingConfiguration?.encode(),
    ];
  }

  static FCPListMessageItemData decode(Object result) {
    result as List<Object?>;
    return FCPListMessageItemData(
      conversationIdentifier: result[0] as String?,
      phoneOrEmailAddress: result[1] as String?,
      detailText: result[2] as String?,
      trailingText: result[3] as String?,
      leadingConfiguration: result[4] != null
          ? FCPMessageListItemLeadingConfigurationData.decode(result[4]! as List<Object?>)
          : null,
      trailingConfiguration: result[5] != null
          ? FCPMessageListItemTrailingConfigurationData.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class WrappedListItemData {
  WrappedListItemData({
    required this.componentData,
    required this.type,
    this.text,
    this.isEnabled = true,
    this.listItemData,
    this.imageRowItemData,
    this.messageItemData,
  });

  FCPComponentData componentData;

  FCPListTemplateItemType type;

  String? text;

  bool isEnabled;

  FCPListItemData? listItemData;

  FCPListImageRowItemData? imageRowItemData;

  FCPListMessageItemData? messageItemData;

  Object encode() {
    return <Object?>[
      componentData.encode(),
      type.index,
      text,
      isEnabled,
      listItemData?.encode(),
      imageRowItemData?.encode(),
      messageItemData?.encode(),
    ];
  }

  static WrappedListItemData decode(Object result) {
    result as List<Object?>;
    return WrappedListItemData(
      componentData: FCPComponentData.decode(result[0]! as List<Object?>),
      type: FCPListTemplateItemType.values[result[1]! as int],
      text: result[2] as String?,
      isEnabled: result[3]! as bool,
      listItemData: result[4] != null
          ? FCPListItemData.decode(result[4]! as List<Object?>)
          : null,
      imageRowItemData: result[5] != null
          ? FCPListImageRowItemData.decode(result[5]! as List<Object?>)
          : null,
      messageItemData: result[6] != null
          ? FCPListMessageItemData.decode(result[6]! as List<Object?>)
          : null,
    );
  }
}

class FCPBarButtonProvidingData {
  FCPBarButtonProvidingData({
    this.backButtonData,
    this.leadingNavigationBarButtonsData,
    this.trailingNavigationBarButtonsData,
  });

  FCPBarButtonData? backButtonData;

  List<FCPBarButtonData?>? leadingNavigationBarButtonsData;

  List<FCPBarButtonData?>? trailingNavigationBarButtonsData;

  Object encode() {
    return <Object?>[
      backButtonData?.encode(),
      leadingNavigationBarButtonsData,
      trailingNavigationBarButtonsData,
    ];
  }

  static FCPBarButtonProvidingData decode(Object result) {
    result as List<Object?>;
    return FCPBarButtonProvidingData(
      backButtonData: result[0] != null
          ? FCPBarButtonData.decode(result[0]! as List<Object?>)
          : null,
      leadingNavigationBarButtonsData: (result[1] as List<Object?>?)?.cast<FCPBarButtonData?>(),
      trailingNavigationBarButtonsData: (result[2] as List<Object?>?)?.cast<FCPBarButtonData?>(),
    );
  }
}

class FCPBarButtonData {
  FCPBarButtonData({
    required this.componentData,
    this.image,
    this.title,
    this.style = FCPBarButtonStyle.rounded,
    this.type = FCPBarButtonType.text,
    this.isEnabled = true,
  });

  FCPComponentData componentData;

  FCPImageData? image;

  String? title;

  FCPBarButtonStyle style;

  FCPBarButtonType type;

  bool isEnabled;

  Object encode() {
    return <Object?>[
      componentData.encode(),
      image?.encode(),
      title,
      style.index,
      type.index,
      isEnabled,
    ];
  }

  static FCPBarButtonData decode(Object result) {
    result as List<Object?>;
    return FCPBarButtonData(
      componentData: FCPComponentData.decode(result[0]! as List<Object?>),
      image: result[1] != null
          ? FCPImageData.decode(result[1]! as List<Object?>)
          : null,
      title: result[2] as String?,
      style: FCPBarButtonStyle.values[result[3]! as int],
      type: FCPBarButtonType.values[result[4]! as int],
      isEnabled: result[5]! as bool,
    );
  }
}

class FCPButtonData {
  FCPButtonData({
    required this.componentData,
    this.image,
    this.title,
    this.isEnabled = true,
  });

  FCPComponentData componentData;

  FCPImageData? image;

  String? title;

  bool isEnabled;

  Object encode() {
    return <Object?>[
      componentData.encode(),
      image?.encode(),
      title,
      isEnabled,
    ];
  }

  static FCPButtonData decode(Object result) {
    result as List<Object?>;
    return FCPButtonData(
      componentData: FCPComponentData.decode(result[0]! as List<Object?>),
      image: result[1] != null
          ? FCPImageData.decode(result[1]! as List<Object?>)
          : null,
      title: result[2] as String?,
      isEnabled: result[3]! as bool,
    );
  }
}

class _TemplateHostApiCodec extends StandardMessageCodec {
  const _TemplateHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FCPBarButtonData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FCPBarButtonData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is FCPBarButtonProvidingData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is FCPButtonData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is FCPComponentData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is FCPImageData) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is FCPImageData) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is FCPListImageRowItemData) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is FCPListItemData) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is FCPListMessageItemData) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is FCPListSectionData) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is FCPListTemplateData) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is FCPMessageListItemLeadingConfigurationData) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is FCPMessageListItemTrailingConfigurationData) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is FCPTabBarTemplateData) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is FCPTabData) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is FCPTemplateData) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is WrappedListItemData) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is WrappedTemplateData) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is WrappedTemplateData) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FCPBarButtonData.decode(readValue(buffer)!);
      case 129: 
        return FCPBarButtonData.decode(readValue(buffer)!);
      case 130: 
        return FCPBarButtonProvidingData.decode(readValue(buffer)!);
      case 131: 
        return FCPButtonData.decode(readValue(buffer)!);
      case 132: 
        return FCPComponentData.decode(readValue(buffer)!);
      case 133: 
        return FCPImageData.decode(readValue(buffer)!);
      case 134: 
        return FCPImageData.decode(readValue(buffer)!);
      case 135: 
        return FCPListImageRowItemData.decode(readValue(buffer)!);
      case 136: 
        return FCPListItemData.decode(readValue(buffer)!);
      case 137: 
        return FCPListMessageItemData.decode(readValue(buffer)!);
      case 138: 
        return FCPListSectionData.decode(readValue(buffer)!);
      case 139: 
        return FCPListTemplateData.decode(readValue(buffer)!);
      case 140: 
        return FCPMessageListItemLeadingConfigurationData.decode(readValue(buffer)!);
      case 141: 
        return FCPMessageListItemTrailingConfigurationData.decode(readValue(buffer)!);
      case 142: 
        return FCPTabBarTemplateData.decode(readValue(buffer)!);
      case 143: 
        return FCPTabData.decode(readValue(buffer)!);
      case 144: 
        return FCPTemplateData.decode(readValue(buffer)!);
      case 145: 
        return WrappedListItemData.decode(readValue(buffer)!);
      case 146: 
        return WrappedTemplateData.decode(readValue(buffer)!);
      case 147: 
        return WrappedTemplateData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class TemplateHostApi {
  /// Constructor for [TemplateHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TemplateHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _TemplateHostApiCodec();

  Future<void> pushTemplate({required WrappedTemplateData wrappedTemplateData, bool animated = true, bool asRoot = false,}) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_carplay_plus.TemplateHostApi.pushTemplate';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[wrappedTemplateData, animated, asRoot]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateTabBarChildTemplates({required String tabBarTemplateId, required List<WrappedTemplateData?> templates}) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_carplay_plus.TemplateHostApi.updateTabBarChildTemplates';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[tabBarTemplateId, templates]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class TemplateFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  void onActionCompletion(String objectId);

  void onTabSelected(String tabBarTemplateId, String selectedTemplateId);

  static void setup(TemplateFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onActionCompletion', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onActionCompletion was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_objectId = (args[0] as String?);
          assert(arg_objectId != null,
              'Argument for dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onActionCompletion was null, expected non-null String.');
          try {
            api.onActionCompletion(arg_objectId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onTabSelected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onTabSelected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_tabBarTemplateId = (args[0] as String?);
          assert(arg_tabBarTemplateId != null,
              'Argument for dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onTabSelected was null, expected non-null String.');
          final String? arg_selectedTemplateId = (args[1] as String?);
          assert(arg_selectedTemplateId != null,
              'Argument for dev.flutter.pigeon.flutter_carplay_plus.TemplateFlutterApi.onTabSelected was null, expected non-null String.');
          try {
            api.onTabSelected(arg_tabBarTemplateId!, arg_selectedTemplateId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
